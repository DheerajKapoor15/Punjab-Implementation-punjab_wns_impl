input {
    jdbc {
        jdbc_connection_string => "jdbc:postgresql://punjab-prod-read-rds.c7gelbottzkp.ap-south-1.rds.amazonaws.com:5432/punjab_prod_app"
        jdbc_user => "<input db user name here>"
        jdbc_password => "<input db user password here>"
        jdbc_validate_connection => true
	jdbc_driver_library => "/home/ubuntu/logstash-6.5.1/jdbc/postgresql-9.4.1212.jar"
	jdbc_driver_class => "org.postgresql.Driver"
	statement => "select (select code from ${CITY_NAME}.eg_city)||'-'||conn.consumercode as id, (select name from ${CITY_NAME}.eg_city) as cityName, (select code from ${CITY_NAME}.eg_city) as cityCode, (select grade from ${CITY_NAME}.eg_city) as cityGrade, (select districtname from ${CITY_NAME}.eg_city) as districtName, (select regionname from ${CITY_NAME}.eg_city) as regionName, 'Water Charges' as serviceType, conndetails.executiondate as connectionDate, conn.consumercode as consumerCode, conn.oldconsumernumber as oldConsumerCode, conndetails.connectionstatus as connectionStatus, usr.name as consumerName, usr.mobilenumber as mobileNumber, usr.emailid as emailId, usr.guardian as guardianName, (COALESCE(address.houseNoBldgApt||', ', '')||COALESCE(address.areaLocalitySector||', ','')||COALESCE(address.streetRoadLine||', ','')||COALESCE(address.landmark||', ','')||COALESCE(address.cityTownVillage||', ','')||COALESCE(address.postOffice||', ','')||COALESCE(address.subdistrict||', ','')||COALESCE(address.district||', ','')||COALESCE(address.state||', ','')||COALESCE(address.country||', ','')||COALESCE(address.pinCode,'')) as consumerAddress, replace(address.housenobldgapt,'/','\') as doorNo,  zone.name as zone, block.name as block, locality.name as locality, conn.propertyidentifier as propertyUID, conn.sewerageidentifier as sewerageConsumerCode,  contype.name as connectionType, usage.name as usage,   proptype.name as propertyType, wtrctgy.name as category,pipe.code as pipeSize, wtrsrc.watersourcetype as waterSource, conndetails.plotsize as plotSize, conndetails.nooftaps as noOfTaps, conndetails.billingtype as billingType, conndetails.legacy as legacy, conndetails.applicationnumber as applicationNumber, conndetails.applicationdate as applicationDate, to_timestamp(to_char(conn.createddate::timestamp without time zone, 'YYYY-MM-DD'),'YYYY-MM-DDTHH24:MI:SSZ') as createdDate, conndetails.isexempted as exempted, CASE (select value from ${CITY_NAME}.eg_appconfig_values where key_id in (select id from ${CITY_NAME}.eg_appconfig where key_name ='IS_PWSSB_ULB')) WHEN 'YES' THEN true ELSE false END as pwssb from ${CITY_NAME}.egwtr_connection conn, ${CITY_NAME}.egwtr_connectiondetails conndetails, ${CITY_NAME}.egwtr_application_type apptype, ${CITY_NAME}.egwtr_usage_type usage, ${CITY_NAME}.eg_boundary locality, ${CITY_NAME}.eg_boundary zone, ${CITY_NAME}.eg_boundary block, ${CITY_NAME}.egwtr_water_source wtrsrc, ${CITY_NAME}.egwtr_property_type proptype, ${CITY_NAME}.egwtr_category wtrctgy, ${CITY_NAME}.egwtr_pipesize pipe, ${CITY_NAME}.egwtr_connection_type contype, ${CITY_NAME}.egwtr_connection_owner_info ownerinfo, ${CITY_NAME}.eg_user usr, ${CITY_NAME}.eg_address address where conn.id=conndetails.connection and apptype.id=conndetails.applicationtype and usage.id=conndetails.usagetype and block.id=conn.block and locality.id=conn.locality and zone.id=conn.zone and conndetails.watersource=wtrsrc.id and conndetails.propertytype=proptype.id and conndetails.category=wtrctgy.id and conndetails.pipesize=pipe.id and ownerinfo.connection=conn.id and usr.id=ownerinfo.owner and address.id=conn.address and contype.id=conndetails.connectiontype"
	}
}
filter {
  mutate {
    add_field => {
      "city" => "${CITY_NAME}"
    }
  }
}
output {
  elasticsearch {
    hosts => "localhost:9200"
    index => "waterchargesconsumers"
    document_type => "waterchargesconsumers"
    document_id => "%{id}"
  }
}

